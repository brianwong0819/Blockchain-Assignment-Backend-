package com.livevote.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class VotingRooms extends Contract {
    public static final String BINARY = "\"0x60806040526040518060400160405280601181526020017f566f74696e6720526f6f6d20546f6b656e00000000000000000000000000000081525060049081610048919061046c565b506040518060400160405280600381526020017f56525400000000000000000000000000000000000000000000000000000000008152506005908161008d919061046c565b5034801561009a57600080fd5b5033604051806020016040528060008152506100bb8161014360201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361012e5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610125919061057f565b60405180910390fd5b61013d8161015660201b60201c565b5061059a565b8060029081610152919061046c565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061029d57607f821691505b6020821081036102b0576102af610256565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102db565b61032286836102db565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061036961036461035f8461033a565b610344565b61033a565b9050919050565b6000819050919050565b6103838361034e565b61039761038f82610370565b8484546102e8565b825550505050565b600090565b6103ac61039f565b6103b781848461037a565b505050565b5b818110156103db576103d06000826103a4565b6001810190506103bd565b5050565b601f821115610420576103f1816102b6565b6103fa846102cb565b81016020851015610409578190505b61041d610415856102cb565b8301826103bc565b50505b505050565b600082821c905092915050565b600061044360001984600802610425565b1980831691505092915050565b600061045c8383610432565b9150826002028217905092915050565b6104758261021c565b67ffffffffffffffff81111561048e5761048d610227565b5b6104988254610285565b6104a38282856103df565b600060209050601f8311600181146104d657600084156104c4578287015190505b6104ce8582610450565b865550610536565b601f1984166104e4866102b6565b60005b8281101561050c578489015182556001820191506020850194506020810190506104e7565b868310156105295784890151610525601f891682610432565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105698261053e565b9050919050565b6105798161055e565b82525050565b60006020820190506105946000830184610570565b92915050565b61308b806105a96000396000f3fe608060405234801561001057600080fd5b506004361061014c5760003560e01c8063715018a6116100c3578063b384abef1161007c578063b384abef146103c6578063d51c6d7d146103e2578063e985e9c514610412578063eadddb3c14610442578063f242432a14610460578063f2fde38b1461047c5761014c565b8063715018a61461032a5780638a529633146103345780638da5cb5b14610350578063921c45ca1461036e57806395d89b411461038c578063a22cb465146103aa5761014c565b8063112d26a911610115578063112d26a9146102305780631bae0ac814610260578063294550de146102915780632eb2c2d6146102c25780634e1273f4146102de57806356a57d361461030e5761014c565b8062fdd58e1461015157806301ffc9a71461018157806306fdde03146101b15780630751464c146101cf5780630e89341c14610200575b600080fd5b61016b6004803603810190610166919061209d565b610498565b60405161017891906120ec565b60405180910390f35b61019b6004803603810190610196919061215f565b6104f2565b6040516101a891906121a7565b60405180910390f35b6101b96105d4565b6040516101c69190612252565b60405180910390f35b6101e960048036038101906101e49190612274565b610662565b6040516101f792919061235f565b60405180910390f35b61021a60048036038101906102159190612274565b6107a7565b6040516102279190612252565b60405180910390f35b61024a60048036038101906102459190612396565b61083b565b60405161025791906120ec565b60405180910390f35b61027a60048036038101906102759190612274565b61086d565b6040516102889291906123d6565b60405180910390f35b6102ab60048036038101906102a69190612274565b610891565b6040516102b99291906123ff565b60405180910390f35b6102dc60048036038101906102d7919061262c565b610911565b005b6102f860048036038101906102f391906127be565b6109b9565b6040516103059190612836565b60405180910390f35b61032860048036038101906103239190612858565b610ac2565b005b610332610bb5565b005b61034e600480360381019061034991906128c7565b610bc9565b005b610358610cca565b6040516103659190612929565b60405180910390f35b610376610cf4565b60405161038391906120ec565b60405180910390f35b610394610cfa565b6040516103a19190612252565b60405180910390f35b6103c460048036038101906103bf9190612970565b610d88565b005b6103e060048036038101906103db9190612396565b610d9e565b005b6103fc60048036038101906103f791906129b0565b610f1f565b60405161040991906120ec565b60405180910390f35b61042c600480360381019061042791906129f0565b610f33565b60405161043991906121a7565b60405180910390f35b61044a610fc7565b60405161045791906120ec565b60405180910390f35b61047a60048036038101906104759190612a30565b610fd1565b005b61049660048036038101906104919190612ac7565b611079565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105bd57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105cd57506105cc826110ff565b5b9050919050565b600480546105e190612b23565b80601f016020809104026020016040519081016040528092919081815260200182805461060d90612b23565b801561065a5780601f1061062f5761010080835404028352916020019161065a565b820191906000526020600020905b81548152906001019060200180831161063d57829003601f168201915b505050505081565b60608060006006600085815260200190815260200160002090506000816002018054905067ffffffffffffffff81111561069f5761069e612434565b5b6040519080825280602002602001820160405280156106cd5781602001602082028036833780820191505090505b50905060005b8260020180549050811015610744578260030160008460020183815481106106fe576106fd612b54565b5b906000526020600020015481526020019081526020016000205482828151811061072b5761072a612b54565b5b60200260200101818152505080806001019150506106d3565b5081600201818180548060200260200160405190810160405280929190818152602001828054801561079557602002820191906000526020600020905b815481526020019060010190808311610781575b50505050509150935093505050915091565b6060600280546107b690612b23565b80601f01602080910402602001604051908101604052809291908181526020018280546107e290612b23565b801561082f5780601f106108045761010080835404028352916020019161082f565b820191906000526020600020905b81548152906001019060200180831161081257829003601f168201915b50505050509050919050565b600060066000848152602001908152602001600020600301600083815260200190815260200160002054905092915050565b60066020528060005260406000206000915090508060000154908060010154905082565b6000606060006006600085815260200190815260200160002090508060000154816002018080548060200260200160405190810160405280929190818152602001828054801561090057602002820191906000526020600020905b8154815260200190600101908083116108ec575b505050505090509250925050915091565b600061091b611169565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015610960575061095e8682610f33565b155b156109a45780866040517fe237d92200000000000000000000000000000000000000000000000000000000815260040161099b929190612b83565b60405180910390fd5b6109b18686868686611171565b505050505050565b60608151835114610a0557815183516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016109fc9291906123d6565b60405180910390fd5b6000835167ffffffffffffffff811115610a2257610a21612434565b5b604051908082528060200260200182016040528015610a505781602001602082028036833780820191505090505b50905060005b8451811015610ab757610a8d610a75828761126990919063ffffffff16565b610a88838761127d90919063ffffffff16565b610498565b828281518110610aa057610a9f612b54565b5b602002602001018181525050806001019050610a56565b508091505092915050565b610aca611291565b6000600660008581526020019081526020016000206000015414610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a90612bf8565b60405180910390fd5b600060066000858152602001908152602001600020905082816000018190555081816002019080519060200190610b5b929190611f8b565b5060076000815480929190610b6f90612c47565b91905055507f94dc7d4289d573a58ecd9059ddd224d512d70add2c89206b91775f9f4feb839f848484604051610ba793929190612c8f565b60405180910390a150505050565b610bbd611291565b610bc76000611318565b565b610bd1611291565b60006006600085815260200190815260200160002090508060000154828260010154610bfd9190612ccd565b1115610c3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3590612d73565b60405180910390fd5b610c59838584604051806020016040528060008152506113de565b81816001016000828254610c6d9190612ccd565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f2914b658708561626c3d42d97ed20d480b0eb93a2365cbce8450b5a371295ea58584604051610cbc9291906123d6565b60405180910390a250505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b60058054610d0790612b23565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3390612b23565b8015610d805780601f10610d5557610100808354040283529160200191610d80565b820191906000526020600020905b815481529060010190602001808311610d6357829003601f168201915b505050505081565b610d9a610d93611169565b8383611477565b5050565b60006006600084815260200190815260200160002090506000610dc13385610498565b11610e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df890612e05565b60405180910390fd5b6000805b8260020180549050811015610e515783836002018281548110610e2b57610e2a612b54565b5b906000526020600020015403610e445760019150610e51565b8080600101915050610e05565b5080610e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8990612e97565b60405180910390fd5b610e9e338560016115e7565b8160030160008481526020019081526020016000206000815480929190610ec490612c47565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f7fe1d4e6b34e228b5dc059fcdc037c71b216fb2417f47c171e505144a5e4f5fc8585604051610f119291906123d6565b60405180910390a250505050565b6000610f2b8284610498565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600754905090565b6000610fdb611169565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614158015611020575061101e8682610f33565b155b156110645780866040517fe237d92200000000000000000000000000000000000000000000000000000000815260040161105b929190612b83565b60405180910390fd5b611071868686868661168e565b505050505050565b611081611291565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110f35760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016110ea9190612929565b60405180910390fd5b6110fc81611318565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036111e35760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016111da9190612929565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036112555760006040517f01a8351400000000000000000000000000000000000000000000000000000000815260040161124c9190612929565b60405180910390fd5b6112628585858585611799565b5050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b611299611169565b73ffffffffffffffffffffffffffffffffffffffff166112b7610cca565b73ffffffffffffffffffffffffffffffffffffffff1614611316576112da611169565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161130d9190612929565b60405180910390fd5b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114505760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016114479190612929565b60405180910390fd5b60008061145d858561184b565b9150915061146f600087848487611799565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114e95760006040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016114e09190612929565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115da91906121a7565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036116595760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016116509190612929565b60405180910390fd5b600080611666848461184b565b91509150611687856000848460405180602001604052806000815250611799565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036117005760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016116f79190612929565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036117725760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016117699190612929565b60405180910390fd5b60008061177f858561184b565b915091506117908787848487611799565b50505050505050565b6117a58585858561187b565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146118445760006117e3611169565b9050600184510361183357600061180460008661127d90919063ffffffff16565b9050600061181c60008661127d90919063ffffffff16565b905061182c838989858589611c23565b5050611842565b611841818787878787611dd7565b5b505b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b80518251146118c557815181516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016118bc9291906123d6565b60405180910390fd5b60006118cf611169565b905060005b8351811015611ade5760006118f2828661127d90919063ffffffff16565b90506000611909838661127d90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614611a3657600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156119de57888183856040517f03dee4c50000000000000000000000000000000000000000000000000000000081526004016119d59493929190612eb7565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611ad1578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ac99190612ccd565b925050819055505b50508060010190506118d4565b506001835103611b9d576000611afe60008561127d90919063ffffffff16565b90506000611b1660008561127d90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611b8e9291906123d6565b60405180910390a45050611c1c565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611c1392919061235f565b60405180910390a45b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115611dcf578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611c84959493929190612f51565b6020604051808303816000875af1925050508015611cc057506040513d601f19601f82011682018060405250810190611cbd9190612fc0565b60015b611d44573d8060008114611cf0576040519150601f19603f3d011682016040523d82523d6000602084013e611cf5565b606091505b506000815103611d3c57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611d339190612929565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611dcd57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611dc49190612929565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115611f83578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611e38959493929190612fed565b6020604051808303816000875af1925050508015611e7457506040513d601f19601f82011682018060405250810190611e719190612fc0565b60015b611ef8573d8060008114611ea4576040519150601f19603f3d011682016040523d82523d6000602084013e611ea9565b606091505b506000815103611ef057846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611ee79190612929565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f8157846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611f789190612929565b60405180910390fd5b505b505050505050565b828054828255906000526020600020908101928215611fc7579160200282015b82811115611fc6578251825591602001919060010190611fab565b5b509050611fd49190611fd8565b5090565b5b80821115611ff1576000816000905550600101611fd9565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061203482612009565b9050919050565b61204481612029565b811461204f57600080fd5b50565b6000813590506120618161203b565b92915050565b6000819050919050565b61207a81612067565b811461208557600080fd5b50565b60008135905061209781612071565b92915050565b600080604083850312156120b4576120b3611fff565b5b60006120c285828601612052565b92505060206120d385828601612088565b9150509250929050565b6120e681612067565b82525050565b600060208201905061210160008301846120dd565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61213c81612107565b811461214757600080fd5b50565b60008135905061215981612133565b92915050565b60006020828403121561217557612174611fff565b5b60006121838482850161214a565b91505092915050565b60008115159050919050565b6121a18161218c565b82525050565b60006020820190506121bc6000830184612198565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156121fc5780820151818401526020810190506121e1565b60008484015250505050565b6000601f19601f8301169050919050565b6000612224826121c2565b61222e81856121cd565b935061223e8185602086016121de565b61224781612208565b840191505092915050565b6000602082019050818103600083015261226c8184612219565b905092915050565b60006020828403121561228a57612289611fff565b5b600061229884828501612088565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122d681612067565b82525050565b60006122e883836122cd565b60208301905092915050565b6000602082019050919050565b600061230c826122a1565b61231681856122ac565b9350612321836122bd565b8060005b8381101561235257815161233988826122dc565b9750612344836122f4565b925050600181019050612325565b5085935050505092915050565b600060408201905081810360008301526123798185612301565b9050818103602083015261238d8184612301565b90509392505050565b600080604083850312156123ad576123ac611fff565b5b60006123bb85828601612088565b92505060206123cc85828601612088565b9150509250929050565b60006040820190506123eb60008301856120dd565b6123f860208301846120dd565b9392505050565b600060408201905061241460008301856120dd565b81810360208301526124268184612301565b90509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61246c82612208565b810181811067ffffffffffffffff8211171561248b5761248a612434565b5b80604052505050565b600061249e611ff5565b90506124aa8282612463565b919050565b600067ffffffffffffffff8211156124ca576124c9612434565b5b602082029050602081019050919050565b600080fd5b60006124f36124ee846124af565b612494565b90508083825260208201905060208402830185811115612516576125156124db565b5b835b8181101561253f578061252b8882612088565b845260208401935050602081019050612518565b5050509392505050565b600082601f83011261255e5761255d61242f565b5b813561256e8482602086016124e0565b91505092915050565b600080fd5b600067ffffffffffffffff82111561259757612596612434565b5b6125a082612208565b9050602081019050919050565b82818337600083830152505050565b60006125cf6125ca8461257c565b612494565b9050828152602081018484840111156125eb576125ea612577565b5b6125f68482856125ad565b509392505050565b600082601f8301126126135761261261242f565b5b81356126238482602086016125bc565b91505092915050565b600080600080600060a0868803121561264857612647611fff565b5b600061265688828901612052565b955050602061266788828901612052565b945050604086013567ffffffffffffffff81111561268857612687612004565b5b61269488828901612549565b935050606086013567ffffffffffffffff8111156126b5576126b4612004565b5b6126c188828901612549565b925050608086013567ffffffffffffffff8111156126e2576126e1612004565b5b6126ee888289016125fe565b9150509295509295909350565b600067ffffffffffffffff82111561271657612715612434565b5b602082029050602081019050919050565b600061273a612735846126fb565b612494565b9050808382526020820190506020840283018581111561275d5761275c6124db565b5b835b8181101561278657806127728882612052565b84526020840193505060208101905061275f565b5050509392505050565b600082601f8301126127a5576127a461242f565b5b81356127b5848260208601612727565b91505092915050565b600080604083850312156127d5576127d4611fff565b5b600083013567ffffffffffffffff8111156127f3576127f2612004565b5b6127ff85828601612790565b925050602083013567ffffffffffffffff8111156128205761281f612004565b5b61282c85828601612549565b9150509250929050565b600060208201905081810360008301526128508184612301565b905092915050565b60008060006060848603121561287157612870611fff565b5b600061287f86828701612088565b935050602061289086828701612088565b925050604084013567ffffffffffffffff8111156128b1576128b0612004565b5b6128bd86828701612549565b9150509250925092565b6000806000606084860312156128e0576128df611fff565b5b60006128ee86828701612088565b93505060206128ff86828701612052565b925050604061291086828701612088565b9150509250925092565b61292381612029565b82525050565b600060208201905061293e600083018461291a565b92915050565b61294d8161218c565b811461295857600080fd5b50565b60008135905061296a81612944565b92915050565b6000806040838503121561298757612986611fff565b5b600061299585828601612052565b92505060206129a68582860161295b565b9150509250929050565b600080604083850312156129c7576129c6611fff565b5b60006129d585828601612088565b92505060206129e685828601612052565b9150509250929050565b60008060408385031215612a0757612a06611fff565b5b6000612a1585828601612052565b9250506020612a2685828601612052565b9150509250929050565b600080600080600060a08688031215612a4c57612a4b611fff565b5b6000612a5a88828901612052565b9550506020612a6b88828901612052565b9450506040612a7c88828901612088565b9350506060612a8d88828901612088565b925050608086013567ffffffffffffffff811115612aae57612aad612004565b5b612aba888289016125fe565b9150509295509295909350565b600060208284031215612add57612adc611fff565b5b6000612aeb84828501612052565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612b3b57607f821691505b602082108103612b4e57612b4d612af4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612b98600083018561291a565b612ba5602083018461291a565b9392505050565b7f526f6f6d2077697468207468697320494420616c726561647920657869737473600082015250565b6000612be26020836121cd565b9150612bed82612bac565b602082019050919050565b60006020820190508181036000830152612c1181612bd5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c5282612067565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c8457612c83612c18565b5b600182019050919050565b6000606082019050612ca460008301866120dd565b612cb160208301856120dd565b8181036040830152612cc38184612301565b9050949350505050565b6000612cd882612067565b9150612ce383612067565b9250828201905080821115612cfb57612cfa612c18565b5b92915050565b7f546f6b656e206c696d697420657863656564656420666f72207468697320726f60008201527f6f6d000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d5d6022836121cd565b9150612d6882612d01565b604082019050919050565b60006020820190508181036000830152612d8c81612d50565b9050919050565b7f596f7520646f206e6f7420686176652074686520726571756972656420746f6b60008201527f656e20666f72207468697320726f6f6d00000000000000000000000000000000602082015250565b6000612def6030836121cd565b9150612dfa82612d93565b604082019050919050565b60006020820190508181036000830152612e1e81612de2565b9050919050565b7f496e76616c69642063616e64696461746520494420666f72207468697320726f60008201527f6f6d000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e816022836121cd565b9150612e8c82612e25565b604082019050919050565b60006020820190508181036000830152612eb081612e74565b9050919050565b6000608082019050612ecc600083018761291a565b612ed960208301866120dd565b612ee660408301856120dd565b612ef360608301846120dd565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000612f2382612efc565b612f2d8185612f07565b9350612f3d8185602086016121de565b612f4681612208565b840191505092915050565b600060a082019050612f66600083018861291a565b612f73602083018761291a565b612f8060408301866120dd565b612f8d60608301856120dd565b8181036080830152612f9f8184612f18565b90509695505050505050565b600081519050612fba81612133565b92915050565b600060208284031215612fd657612fd5611fff565b5b6000612fe484828501612fab565b91505092915050565b600060a082019050613002600083018861291a565b61300f602083018761291a565b81810360408301526130218186612301565b905081810360608301526130358185612301565b905081810360808301526130498184612f18565b9050969550505050505056fea26469706673582212206127fc3241d135c0b862060f72bcd2b4ad548511895dc2d6677346ac3339c71464736f6c634300081b0033\"";

    private static String librariesLinkedBinary;

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_CREATEROOM = "createRoom";

    public static final String FUNC_DISTRIBUTETOKENS = "distributeTokens";

    public static final String FUNC_GETCANDIDATEVOTES = "getCandidateVotes";

    public static final String FUNC_GETROOMCOUNT = "getRoomCount";

    public static final String FUNC_GETROOMDETAILS = "getRoomDetails";

    public static final String FUNC_GETROOMRESULTS = "getRoomResults";

    public static final String FUNC_GETUSERTOKENBALANCEINROOM = "getUserTokenBalanceInRoom";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROOMCOUNTER = "roomCounter";

    public static final String FUNC_ROOMS = "rooms";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_URI = "uri";

    public static final String FUNC_VOTE = "vote";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROOMCREATED_EVENT = new Event("RoomCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TOKENDISTRIBUTED_EVENT = new Event("TokenDistributed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event VOTECAST_EVENT = new Event("VoteCast", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected VotingRooms(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VotingRooms(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VotingRooms(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VotingRooms(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<RoomCreatedEventResponse> getRoomCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROOMCREATED_EVENT, transactionReceipt);
        ArrayList<RoomCreatedEventResponse> responses = new ArrayList<RoomCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoomCreatedEventResponse typedResponse = new RoomCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.candidateIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoomCreatedEventResponse getRoomCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROOMCREATED_EVENT, log);
        RoomCreatedEventResponse typedResponse = new RoomCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.candidateIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<RoomCreatedEventResponse> roomCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoomCreatedEventFromLog(log));
    }

    public Flowable<RoomCreatedEventResponse> roomCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOMCREATED_EVENT));
        return roomCreatedEventFlowable(filter);
    }

    public static List<TokenDistributedEventResponse> getTokenDistributedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENDISTRIBUTED_EVENT, transactionReceipt);
        ArrayList<TokenDistributedEventResponse> responses = new ArrayList<TokenDistributedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenDistributedEventResponse typedResponse = new TokenDistributedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TokenDistributedEventResponse getTokenDistributedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TOKENDISTRIBUTED_EVENT, log);
        TokenDistributedEventResponse typedResponse = new TokenDistributedEventResponse();
        typedResponse.log = log;
        typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TokenDistributedEventResponse> tokenDistributedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTokenDistributedEventFromLog(log));
    }

    public Flowable<TokenDistributedEventResponse> tokenDistributedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENDISTRIBUTED_EVENT));
        return tokenDistributedEventFlowable(filter);
    }

    public static List<TransferBatchEventResponse> getTransferBatchEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferBatchEventResponse getTransferBatchEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
        TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
        typedResponse.log = log;
        typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferBatchEventFromLog(log));
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public static List<TransferSingleEventResponse> getTransferSingleEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferSingleEventResponse getTransferSingleEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
        TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
        typedResponse.log = log;
        typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferSingleEventFromLog(log));
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public static List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static URIEventResponse getURIEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(URI_EVENT, log);
        URIEventResponse typedResponse = new URIEventResponse();
        typedResponse.log = log;
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getURIEventFromLog(log));
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public static List<VoteCastEventResponse> getVoteCastEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTECAST_EVENT, transactionReceipt);
        ArrayList<VoteCastEventResponse> responses = new ArrayList<VoteCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastEventResponse typedResponse = new VoteCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.candidateId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VoteCastEventResponse getVoteCastEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VOTECAST_EVENT, log);
        VoteCastEventResponse typedResponse = new VoteCastEventResponse();
        typedResponse.log = log;
        typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.candidateId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVoteCastEventFromLog(log));
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECAST_EVENT));
        return voteCastEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final Function function = new Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createRoom(BigInteger roomId,
            BigInteger tokenLimit, List<BigInteger> candidateIds) {
        final Function function = new Function(
                FUNC_CREATEROOM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenLimit), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(candidateIds, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> distributeTokens(BigInteger roomId, String to,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_DISTRIBUTETOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getCandidateVotes(BigInteger roomId,
            BigInteger candidateId) {
        final Function function = new Function(FUNC_GETCANDIDATEVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.generated.Uint256(candidateId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getRoomCount() {
        final Function function = new Function(FUNC_GETROOMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, List<BigInteger>>> getRoomDetails(
            BigInteger roomId) {
        final Function function = new Function(FUNC_GETROOMDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, List<BigInteger>>>(function,
                new Callable<Tuple2<BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple2<BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>> getRoomResults(
            BigInteger roomId) {
        final Function function = new Function(FUNC_GETROOMRESULTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getUserTokenBalanceInRoom(BigInteger roomId,
            String user) {
        final Function function = new Function(FUNC_GETUSERTOKENBALANCEINROOM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> roomCounter() {
        final Function function = new Function(FUNC_ROOMCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> rooms(BigInteger param0) {
        final Function function = new Function(FUNC_ROOMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to,
            List<BigInteger> ids, List<BigInteger> values, byte[] data) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger id, BigInteger value, byte[] data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final Function function = new Function(FUNC_URI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger roomId, BigInteger candidateId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.generated.Uint256(candidateId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static VotingRooms load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingRooms(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VotingRooms load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingRooms(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VotingRooms load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new VotingRooms(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VotingRooms load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VotingRooms(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VotingRooms> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingRooms.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<VotingRooms> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingRooms.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VotingRooms> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingRooms.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VotingRooms> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingRooms.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RoomCreatedEventResponse extends BaseEventResponse {
        public BigInteger roomId;

        public BigInteger tokenLimit;

        public List<BigInteger> candidateIds;
    }

    public static class TokenDistributedEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger roomId;

        public BigInteger amount;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger roomId;

        public BigInteger candidateId;
    }
}
