package com.livevote.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class VotingRooms extends Contract {
    public static final String BINARY = "\"0x60806040526040518060400160405280601181526020017f566f74696e6720526f6f6d20546f6b656e000000000000000000000000000000815250600490816100489190610475565b506040518060400160405280600381526020017f56525400000000000000000000000000000000000000000000000000000000008152506005908161008d9190610475565b5034801561009a57600080fd5b50336040518060600160405280602c81526020016137bb602c91396100c48161014c60201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101375760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161012e9190610588565b60405180910390fd5b6101468161015f60201b60201c565b506105a3565b806002908161015b9190610475565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806102a657607f821691505b6020821081036102b9576102b861025f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103217fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102e4565b61032b86836102e4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061037261036d61036884610343565b61034d565b610343565b9050919050565b6000819050919050565b61038c83610357565b6103a061039882610379565b8484546102f1565b825550505050565b600090565b6103b56103a8565b6103c0818484610383565b505050565b5b818110156103e4576103d96000826103ad565b6001810190506103c6565b5050565b601f821115610429576103fa816102bf565b610403846102d4565b81016020851015610412578190505b61042661041e856102d4565b8301826103c5565b50505b505050565b600082821c905092915050565b600061044c6000198460080261042e565b1980831691505092915050565b6000610465838361043b565b9150826002028217905092915050565b61047e82610225565b67ffffffffffffffff81111561049757610496610230565b5b6104a1825461028e565b6104ac8282856103e8565b600060209050601f8311600181146104df57600084156104cd578287015190505b6104d78582610459565b86555061053f565b601f1984166104ed866102bf565b60005b82811015610515578489015182556001820191506020850194506020810190506104f0565b86831015610532578489015161052e601f89168261043b565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061057282610547565b9050919050565b61058281610567565b82525050565b600060208201905061059d6000830184610579565b92915050565b613209806105b26000396000f3fe608060405234801561001057600080fd5b50600436106101575760003560e01c8063715018a6116100c3578063b384abef1161007c578063b384abef146103ef578063d2111a721461040b578063e985e9c514610427578063eadddb3c14610457578063f242432a14610475578063f2fde38b1461049157610157565b8063715018a6146103535780638a5296331461035d5780638da5cb5b14610379578063921c45ca1461039757806395d89b41146103b5578063a22cb465146103d357610157565b80631bae0ac8116101155780631bae0ac81461026b578063294550de1461029d5780632eb2c2d6146102cf5780634e1273f4146102eb57806356a57d361461031b5780635f2ba6b21461033757610157565b8062fdd58e1461015c57806301ffc9a71461018c57806306fdde03146101bc5780630751464c146101da5780630e89341c1461020b578063112d26a91461023b575b600080fd5b610176600480360381019061017191906121aa565b6104ad565b60405161018391906121f9565b60405180910390f35b6101a660048036038101906101a1919061226c565b610507565b6040516101b391906122b4565b60405180910390f35b6101c46105e9565b6040516101d1919061235f565b60405180910390f35b6101f460048036038101906101ef9190612381565b610677565b60405161020292919061246c565b60405180910390f35b61022560048036038101906102209190612381565b6107bc565b604051610232919061235f565b60405180910390f35b610255600480360381019061025091906124a3565b610850565b60405161026291906121f9565b60405180910390f35b61028560048036038101906102809190612381565b610882565b604051610294939291906124e3565b60405180910390f35b6102b760048036038101906102b29190612381565b6108b9565b6040516102c69392919061251a565b60405180910390f35b6102e960048036038101906102e49190612755565b610950565b005b610305600480360381019061030091906128e7565b6109f8565b604051610312919061295f565b60405180910390f35b61033560048036038101906103309190612981565b610b01565b005b610351600480360381019061034c9190612381565b610c11565b005b61035b610c4b565b005b610377600480360381019061037291906129f0565b610c5f565b005b610381610d60565b60405161038e9190612a52565b60405180910390f35b61039f610d8a565b6040516103ac91906121f9565b60405180910390f35b6103bd610d90565b6040516103ca919061235f565b60405180910390f35b6103ed60048036038101906103e89190612a99565b610e1e565b005b610409600480360381019061040491906124a3565b610e34565b005b61042560048036038101906104209190612381565b611006565b005b610441600480360381019061043c9190612ad9565b611040565b60405161044e91906122b4565b60405180910390f35b61045f6110d4565b60405161046c91906121f9565b60405180910390f35b61048f600480360381019061048a9190612b19565b6110de565b005b6104ab60048036038101906104a69190612bb0565b611186565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105d257507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105e257506105e18261120c565b5b9050919050565b600480546105f690612c0c565b80601f016020809104026020016040519081016040528092919081815260200182805461062290612c0c565b801561066f5780601f106106445761010080835404028352916020019161066f565b820191906000526020600020905b81548152906001019060200180831161065257829003601f168201915b505050505081565b60608060006006600085815260200190815260200160002090506000816002018054905067ffffffffffffffff8111156106b4576106b361255d565b5b6040519080825280602002602001820160405280156106e25781602001602082028036833780820191505090505b50905060005b82600201805490508110156107595782600401600084600201838154811061071357610712612c3d565b5b90600052602060002001548152602001908152602001600020548282815181106107405761073f612c3d565b5b60200260200101818152505080806001019150506106e8565b508160020181818054806020026020016040519081016040528092919081815260200182805480156107aa57602002820191906000526020600020905b815481526020019060010190808311610796575b50505050509150935093505050915091565b6060600280546107cb90612c0c565b80601f01602080910402602001604051908101604052809291908181526020018280546107f790612c0c565b80156108445780601f1061081957610100808354040283529160200191610844565b820191906000526020600020905b81548152906001019060200180831161082757829003601f168201915b50505050509050919050565b600060066000848152602001908152602001600020600401600083815260200190815260200160002054905092915050565b60066020528060005260406000206000915090508060000154908060010154908060030160009054906101000a900460ff16905083565b600060606000806006600086815260200190815260200160002090508060000154816002018260030160009054906101000a900460ff168180548060200260200160405190810160405280929190818152602001828054801561093b57602002820191906000526020600020905b815481526020019060010190808311610927575b50505050509150935093509350509193909250565b600061095a611276565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415801561099f575061099d8682611040565b155b156109e35780866040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016109da929190612c6c565b60405180910390fd5b6109f0868686868661127e565b505050505050565b60608151835114610a4457815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610a3b929190612c95565b60405180910390fd5b6000835167ffffffffffffffff811115610a6157610a6061255d565b5b604051908082528060200260200182016040528015610a8f5781602001602082028036833780820191505090505b50905060005b8451811015610af657610acc610ab4828761137690919063ffffffff16565b610ac7838761138a90919063ffffffff16565b6104ad565b828281518110610adf57610ade612c3d565b5b602002602001018181525050806001019050610a95565b508091505092915050565b610b0961139e565b6000600660008581526020019081526020016000206000015414610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5990612d0a565b60405180910390fd5b600060066000858152602001908152602001600020905082816000018190555081816002019080519060200190610b9a929190612098565b5060018160030160006101000a81548160ff02191690831515021790555060076000815480929190610bcb90612d59565b91905055507f94dc7d4289d573a58ecd9059ddd224d512d70add2c89206b91775f9f4feb839f848484604051610c0393929190612da1565b60405180910390a150505050565b610c1961139e565b60016006600083815260200190815260200160002060030160006101000a81548160ff02191690831515021790555050565b610c5361139e565b610c5d6000611425565b565b610c6761139e565b60006006600085815260200190815260200160002090508060000154828260010154610c939190612ddf565b1115610cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccb90612e85565b60405180910390fd5b610cef838584604051806020016040528060008152506114eb565b81816001016000828254610d039190612ddf565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f2914b658708561626c3d42d97ed20d480b0eb93a2365cbce8450b5a371295ea58584604051610d52929190612c95565b60405180910390a250505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b60058054610d9d90612c0c565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc990612c0c565b8015610e165780601f10610deb57610100808354040283529160200191610e16565b820191906000526020600020905b815481529060010190602001808311610df957829003601f168201915b505050505081565b610e30610e29611276565b8383611584565b5050565b60006006600084815260200190815260200160002090508060030160009054906101000a900460ff16610e9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9390612ef1565b60405180910390fd5b6000610ea833856104ad565b11610ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edf90612f83565b60405180910390fd5b6000805b8260020180549050811015610f385783836002018281548110610f1257610f11612c3d565b5b906000526020600020015403610f2b5760019150610f38565b8080600101915050610eec565b5080610f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7090613015565b60405180910390fd5b610f85338560016116f4565b8160040160008481526020019081526020016000206000815480929190610fab90612d59565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f7fe1d4e6b34e228b5dc059fcdc037c71b216fb2417f47c171e505144a5e4f5fc8585604051610ff8929190612c95565b60405180910390a250505050565b61100e61139e565b60006006600083815260200190815260200160002060030160006101000a81548160ff02191690831515021790555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600754905090565b60006110e8611276565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415801561112d575061112b8682611040565b155b156111715780866040517fe237d922000000000000000000000000000000000000000000000000000000008152600401611168929190612c6c565b60405180910390fd5b61117e868686868661179b565b505050505050565b61118e61139e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112005760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016111f79190612a52565b60405180910390fd5b61120981611425565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036112f05760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016112e79190612a52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036113625760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016113599190612a52565b60405180910390fd5b61136f85858585856118a6565b5050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b6113a6611276565b73ffffffffffffffffffffffffffffffffffffffff166113c4610d60565b73ffffffffffffffffffffffffffffffffffffffff1614611423576113e7611276565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161141a9190612a52565b60405180910390fd5b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361155d5760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016115549190612a52565b60405180910390fd5b60008061156a8585611958565b9150915061157c6000878484876118a6565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115f65760006040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016115ed9190612a52565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116e791906122b4565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036117665760006040517f01a8351400000000000000000000000000000000000000000000000000000000815260040161175d9190612a52565b60405180910390fd5b6000806117738484611958565b915091506117948560008484604051806020016040528060008152506118a6565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361180d5760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016118049190612a52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361187f5760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016118769190612a52565b60405180910390fd5b60008061188c8585611958565b9150915061189d87878484876118a6565b50505050505050565b6118b285858585611988565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146119515760006118f0611276565b9050600184510361194057600061191160008661138a90919063ffffffff16565b9050600061192960008661138a90919063ffffffff16565b9050611939838989858589611d30565b505061194f565b61194e818787878787611ee4565b5b505b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b80518251146119d257815181516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016119c9929190612c95565b60405180910390fd5b60006119dc611276565b905060005b8351811015611beb5760006119ff828661138a90919063ffffffff16565b90506000611a16838661138a90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614611b4357600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611aeb57888183856040517f03dee4c5000000000000000000000000000000000000000000000000000000008152600401611ae29493929190613035565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611bde578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bd69190612ddf565b925050819055505b50508060010190506119e1565b506001835103611caa576000611c0b60008561138a90919063ffffffff16565b90506000611c2360008561138a90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611c9b929190612c95565b60405180910390a45050611d29565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611d2092919061246c565b60405180910390a45b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115611edc578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611d919594939291906130cf565b6020604051808303816000875af1925050508015611dcd57506040513d601f19601f82011682018060405250810190611dca919061313e565b60015b611e51573d8060008114611dfd576040519150601f19603f3d011682016040523d82523d6000602084013e611e02565b606091505b506000815103611e4957846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611e409190612a52565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611eda57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611ed19190612a52565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612090578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611f4595949392919061316b565b6020604051808303816000875af1925050508015611f8157506040513d601f19601f82011682018060405250810190611f7e919061313e565b60015b612005573d8060008114611fb1576040519150601f19603f3d011682016040523d82523d6000602084013e611fb6565b606091505b506000815103611ffd57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611ff49190612a52565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461208e57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016120859190612a52565b60405180910390fd5b505b505050505050565b8280548282559060005260206000209081019282156120d4579160200282015b828111156120d35782518255916020019190600101906120b8565b5b5090506120e191906120e5565b5090565b5b808211156120fe5760008160009055506001016120e6565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061214182612116565b9050919050565b61215181612136565b811461215c57600080fd5b50565b60008135905061216e81612148565b92915050565b6000819050919050565b61218781612174565b811461219257600080fd5b50565b6000813590506121a48161217e565b92915050565b600080604083850312156121c1576121c061210c565b5b60006121cf8582860161215f565b92505060206121e085828601612195565b9150509250929050565b6121f381612174565b82525050565b600060208201905061220e60008301846121ea565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61224981612214565b811461225457600080fd5b50565b60008135905061226681612240565b92915050565b6000602082840312156122825761228161210c565b5b600061229084828501612257565b91505092915050565b60008115159050919050565b6122ae81612299565b82525050565b60006020820190506122c960008301846122a5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123095780820151818401526020810190506122ee565b60008484015250505050565b6000601f19601f8301169050919050565b6000612331826122cf565b61233b81856122da565b935061234b8185602086016122eb565b61235481612315565b840191505092915050565b600060208201905081810360008301526123798184612326565b905092915050565b6000602082840312156123975761239661210c565b5b60006123a584828501612195565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6123e381612174565b82525050565b60006123f583836123da565b60208301905092915050565b6000602082019050919050565b6000612419826123ae565b61242381856123b9565b935061242e836123ca565b8060005b8381101561245f57815161244688826123e9565b975061245183612401565b925050600181019050612432565b5085935050505092915050565b60006040820190508181036000830152612486818561240e565b9050818103602083015261249a818461240e565b90509392505050565b600080604083850312156124ba576124b961210c565b5b60006124c885828601612195565b92505060206124d985828601612195565b9150509250929050565b60006060820190506124f860008301866121ea565b61250560208301856121ea565b61251260408301846122a5565b949350505050565b600060608201905061252f60008301866121ea565b8181036020830152612541818561240e565b905061255060408301846122a5565b949350505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61259582612315565b810181811067ffffffffffffffff821117156125b4576125b361255d565b5b80604052505050565b60006125c7612102565b90506125d3828261258c565b919050565b600067ffffffffffffffff8211156125f3576125f261255d565b5b602082029050602081019050919050565b600080fd5b600061261c612617846125d8565b6125bd565b9050808382526020820190506020840283018581111561263f5761263e612604565b5b835b8181101561266857806126548882612195565b845260208401935050602081019050612641565b5050509392505050565b600082601f83011261268757612686612558565b5b8135612697848260208601612609565b91505092915050565b600080fd5b600067ffffffffffffffff8211156126c0576126bf61255d565b5b6126c982612315565b9050602081019050919050565b82818337600083830152505050565b60006126f86126f3846126a5565b6125bd565b905082815260208101848484011115612714576127136126a0565b5b61271f8482856126d6565b509392505050565b600082601f83011261273c5761273b612558565b5b813561274c8482602086016126e5565b91505092915050565b600080600080600060a086880312156127715761277061210c565b5b600061277f8882890161215f565b95505060206127908882890161215f565b945050604086013567ffffffffffffffff8111156127b1576127b0612111565b5b6127bd88828901612672565b935050606086013567ffffffffffffffff8111156127de576127dd612111565b5b6127ea88828901612672565b925050608086013567ffffffffffffffff81111561280b5761280a612111565b5b61281788828901612727565b9150509295509295909350565b600067ffffffffffffffff82111561283f5761283e61255d565b5b602082029050602081019050919050565b600061286361285e84612824565b6125bd565b9050808382526020820190506020840283018581111561288657612885612604565b5b835b818110156128af578061289b888261215f565b845260208401935050602081019050612888565b5050509392505050565b600082601f8301126128ce576128cd612558565b5b81356128de848260208601612850565b91505092915050565b600080604083850312156128fe576128fd61210c565b5b600083013567ffffffffffffffff81111561291c5761291b612111565b5b612928858286016128b9565b925050602083013567ffffffffffffffff81111561294957612948612111565b5b61295585828601612672565b9150509250929050565b60006020820190508181036000830152612979818461240e565b905092915050565b60008060006060848603121561299a5761299961210c565b5b60006129a886828701612195565b93505060206129b986828701612195565b925050604084013567ffffffffffffffff8111156129da576129d9612111565b5b6129e686828701612672565b9150509250925092565b600080600060608486031215612a0957612a0861210c565b5b6000612a1786828701612195565b9350506020612a288682870161215f565b9250506040612a3986828701612195565b9150509250925092565b612a4c81612136565b82525050565b6000602082019050612a676000830184612a43565b92915050565b612a7681612299565b8114612a8157600080fd5b50565b600081359050612a9381612a6d565b92915050565b60008060408385031215612ab057612aaf61210c565b5b6000612abe8582860161215f565b9250506020612acf85828601612a84565b9150509250929050565b60008060408385031215612af057612aef61210c565b5b6000612afe8582860161215f565b9250506020612b0f8582860161215f565b9150509250929050565b600080600080600060a08688031215612b3557612b3461210c565b5b6000612b438882890161215f565b9550506020612b548882890161215f565b9450506040612b6588828901612195565b9350506060612b7688828901612195565b925050608086013567ffffffffffffffff811115612b9757612b96612111565b5b612ba388828901612727565b9150509295509295909350565b600060208284031215612bc657612bc561210c565b5b6000612bd48482850161215f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612c2457607f821691505b602082108103612c3757612c36612bdd565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612c816000830185612a43565b612c8e6020830184612a43565b9392505050565b6000604082019050612caa60008301856121ea565b612cb760208301846121ea565b9392505050565b7f526f6f6d2077697468207468697320494420616c726561647920657869737473600082015250565b6000612cf46020836122da565b9150612cff82612cbe565b602082019050919050565b60006020820190508181036000830152612d2381612ce7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612d6482612174565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d9657612d95612d2a565b5b600182019050919050565b6000606082019050612db660008301866121ea565b612dc360208301856121ea565b8181036040830152612dd5818461240e565b9050949350505050565b6000612dea82612174565b9150612df583612174565b9250828201905080821115612e0d57612e0c612d2a565b5b92915050565b7f546f6b656e206c696d697420657863656564656420666f72207468697320726f60008201527f6f6d000000000000000000000000000000000000000000000000000000000000602082015250565b6000612e6f6022836122da565b9150612e7a82612e13565b604082019050919050565b60006020820190508181036000830152612e9e81612e62565b9050919050565b7f566f74696e6720697320636c6f73656420666f72207468697320726f6f6d0000600082015250565b6000612edb601e836122da565b9150612ee682612ea5565b602082019050919050565b60006020820190508181036000830152612f0a81612ece565b9050919050565b7f596f7520646f206e6f7420686176652074686520726571756972656420746f6b60008201527f656e20666f72207468697320726f6f6d00000000000000000000000000000000602082015250565b6000612f6d6030836122da565b9150612f7882612f11565b604082019050919050565b60006020820190508181036000830152612f9c81612f60565b9050919050565b7f496e76616c69642063616e64696461746520494420666f72207468697320726f60008201527f6f6d000000000000000000000000000000000000000000000000000000000000602082015250565b6000612fff6022836122da565b915061300a82612fa3565b604082019050919050565b6000602082019050818103600083015261302e81612ff2565b9050919050565b600060808201905061304a6000830187612a43565b61305760208301866121ea565b61306460408301856121ea565b61307160608301846121ea565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60006130a18261307a565b6130ab8185613085565b93506130bb8185602086016122eb565b6130c481612315565b840191505092915050565b600060a0820190506130e46000830188612a43565b6130f16020830187612a43565b6130fe60408301866121ea565b61310b60608301856121ea565b818103608083015261311d8184613096565b90509695505050505050565b60008151905061313881612240565b92915050565b6000602082840312156131545761315361210c565b5b600061316284828501613129565b91505092915050565b600060a0820190506131806000830188612a43565b61318d6020830187612a43565b818103604083015261319f818661240e565b905081810360608301526131b3818561240e565b905081810360808301526131c78184613096565b9050969550505050505056fea264697066735822122061d76d634f81e83f089d653463bcb7e148f129903a2b60a54d4a5ab70332c4e664736f6c634300081b0033687474703a2f2f6c6f63616c686f73743a383038302f6170692f6d657461646174612f7b69647d2e6a736f6e\"";

    private static String librariesLinkedBinary;

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_CLOSEVOTING = "closeVoting";

    public static final String FUNC_CREATEROOM = "createRoom";

    public static final String FUNC_DISTRIBUTETOKENS = "distributeTokens";

    public static final String FUNC_GETCANDIDATEVOTES = "getCandidateVotes";

    public static final String FUNC_GETROOMCOUNT = "getRoomCount";

    public static final String FUNC_GETROOMDETAILS = "getRoomDetails";

    public static final String FUNC_GETROOMRESULTS = "getRoomResults";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OPENVOTING = "openVoting";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROOMCOUNTER = "roomCounter";

    public static final String FUNC_ROOMS = "rooms";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_URI = "uri";

    public static final String FUNC_VOTE = "vote";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROOMCREATED_EVENT = new Event("RoomCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TOKENDISTRIBUTED_EVENT = new Event("TokenDistributed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event VOTECAST_EVENT = new Event("VoteCast", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected VotingRooms(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VotingRooms(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VotingRooms(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VotingRooms(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<RoomCreatedEventResponse> getRoomCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROOMCREATED_EVENT, transactionReceipt);
        ArrayList<RoomCreatedEventResponse> responses = new ArrayList<RoomCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoomCreatedEventResponse typedResponse = new RoomCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.candidateIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoomCreatedEventResponse getRoomCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROOMCREATED_EVENT, log);
        RoomCreatedEventResponse typedResponse = new RoomCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.candidateIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<RoomCreatedEventResponse> roomCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoomCreatedEventFromLog(log));
    }

    public Flowable<RoomCreatedEventResponse> roomCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOMCREATED_EVENT));
        return roomCreatedEventFlowable(filter);
    }

    public static List<TokenDistributedEventResponse> getTokenDistributedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENDISTRIBUTED_EVENT, transactionReceipt);
        ArrayList<TokenDistributedEventResponse> responses = new ArrayList<TokenDistributedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenDistributedEventResponse typedResponse = new TokenDistributedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TokenDistributedEventResponse getTokenDistributedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TOKENDISTRIBUTED_EVENT, log);
        TokenDistributedEventResponse typedResponse = new TokenDistributedEventResponse();
        typedResponse.log = log;
        typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TokenDistributedEventResponse> tokenDistributedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTokenDistributedEventFromLog(log));
    }

    public Flowable<TokenDistributedEventResponse> tokenDistributedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENDISTRIBUTED_EVENT));
        return tokenDistributedEventFlowable(filter);
    }

    public static List<TransferBatchEventResponse> getTransferBatchEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferBatchEventResponse getTransferBatchEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
        TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
        typedResponse.log = log;
        typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferBatchEventFromLog(log));
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public static List<TransferSingleEventResponse> getTransferSingleEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferSingleEventResponse getTransferSingleEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
        TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
        typedResponse.log = log;
        typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferSingleEventFromLog(log));
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public static List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static URIEventResponse getURIEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(URI_EVENT, log);
        URIEventResponse typedResponse = new URIEventResponse();
        typedResponse.log = log;
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getURIEventFromLog(log));
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public static List<VoteCastEventResponse> getVoteCastEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTECAST_EVENT, transactionReceipt);
        ArrayList<VoteCastEventResponse> responses = new ArrayList<VoteCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastEventResponse typedResponse = new VoteCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.candidateId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VoteCastEventResponse getVoteCastEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VOTECAST_EVENT, log);
        VoteCastEventResponse typedResponse = new VoteCastEventResponse();
        typedResponse.log = log;
        typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.candidateId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVoteCastEventFromLog(log));
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECAST_EVENT));
        return voteCastEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final Function function = new Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> closeVoting(BigInteger roomId) {
        final Function function = new Function(
                FUNC_CLOSEVOTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createRoom(BigInteger roomId,
            BigInteger tokenLimit, List<BigInteger> candidateIds) {
        final Function function = new Function(
                FUNC_CREATEROOM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenLimit), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(candidateIds, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> distributeTokens(BigInteger roomId, String to,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_DISTRIBUTETOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getCandidateVotes(BigInteger roomId,
            BigInteger candidateId) {
        final Function function = new Function(FUNC_GETCANDIDATEVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.generated.Uint256(candidateId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getRoomCount() {
        final Function function = new Function(FUNC_GETROOMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, List<BigInteger>, Boolean>> getRoomDetails(
            BigInteger roomId) {
        final Function function = new Function(FUNC_GETROOMDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, List<BigInteger>, Boolean>>(function,
                new Callable<Tuple3<BigInteger, List<BigInteger>, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, List<BigInteger>, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, List<BigInteger>, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>> getRoomResults(
            BigInteger roomId) {
        final Function function = new Function(FUNC_GETROOMRESULTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> openVoting(BigInteger roomId) {
        final Function function = new Function(
                FUNC_OPENVOTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> roomCounter() {
        final Function function = new Function(FUNC_ROOMCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>> rooms(BigInteger param0) {
        final Function function = new Function(FUNC_ROOMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to,
            List<BigInteger> ids, List<BigInteger> values, byte[] data) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger id, BigInteger value, byte[] data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final Function function = new Function(FUNC_URI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger roomId, BigInteger candidateId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.generated.Uint256(candidateId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static VotingRooms load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingRooms(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VotingRooms load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingRooms(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VotingRooms load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new VotingRooms(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VotingRooms load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VotingRooms(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VotingRooms> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingRooms.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<VotingRooms> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingRooms.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VotingRooms> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingRooms.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VotingRooms> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingRooms.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RoomCreatedEventResponse extends BaseEventResponse {
        public BigInteger roomId;

        public BigInteger tokenLimit;

        public List<BigInteger> candidateIds;
    }

    public static class TokenDistributedEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger roomId;

        public BigInteger amount;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger roomId;

        public BigInteger candidateId;
    }
}
