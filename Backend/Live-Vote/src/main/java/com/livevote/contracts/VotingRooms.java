package com.livevote.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class VotingRooms extends Contract {
    public static final String BINARY = "\"0x60806040526040518060400160405280601181526020017f566f74696e6720526f6f6d20546f6b656e00000000000000000000000000000081525060049081610048919061046c565b506040518060400160405280600381526020017f56525400000000000000000000000000000000000000000000000000000000008152506005908161008d919061046c565b5034801561009a57600080fd5b5033604051806020016040528060008152506100bb8161014360201b60201c565b50600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361012e5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610125919061057f565b60405180910390fd5b61013d8161015660201b60201c565b5061059a565b8060029081610152919061046c565b5050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061029d57607f821691505b6020821081036102b0576102af610256565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026103187fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826102db565b61032286836102db565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061036961036461035f8461033a565b610344565b61033a565b9050919050565b6000819050919050565b6103838361034e565b61039761038f82610370565b8484546102e8565b825550505050565b600090565b6103ac61039f565b6103b781848461037a565b505050565b5b818110156103db576103d06000826103a4565b6001810190506103bd565b5050565b601f821115610420576103f1816102b6565b6103fa846102cb565b81016020851015610409578190505b61041d610415856102cb565b8301826103bc565b50505b505050565b600082821c905092915050565b600061044360001984600802610425565b1980831691505092915050565b600061045c8383610432565b9150826002028217905092915050565b6104758261021c565b67ffffffffffffffff81111561048e5761048d610227565b5b6104988254610285565b6104a38282856103df565b600060209050601f8311600181146104d657600084156104c4578287015190505b6104ce8582610450565b865550610536565b601f1984166104e4866102b6565b60005b8281101561050c578489015182556001820191506020850194506020810190506104e7565b868310156105295784890151610525601f891682610432565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105698261053e565b9050919050565b6105798161055e565b82525050565b60006020820190506105946000830184610570565b92915050565b613437806105a96000396000f3fe608060405234801561001057600080fd5b50600436106101575760003560e01c8063715018a6116100c3578063bc9af0c31161007c578063bc9af0c314610402578063d51c6d7d1461041e578063e985e9c51461044e578063eadddb3c1461047e578063f242432a1461049c578063f2fde38b146104b857610157565b8063715018a6146103665780638da5cb5b14610370578063921c45ca1461038e57806395d89b41146103ac578063a22cb465146103ca578063b384abef146103e657610157565b80631bae0ac8116101155780631bae0ac81461026b578063294550de1461029c5780632eb2c2d6146102cd5780634e1273f4146102e95780634ea20a161461031957806356a57d361461034a57610157565b8062fdd58e1461015c57806301ffc9a71461018c57806306fdde03146101bc5780630751464c146101da5780630e89341c1461020b578063112d26a91461023b575b600080fd5b610176600480360381019061017191906122eb565b6104d4565b604051610183919061233a565b60405180910390f35b6101a660048036038101906101a191906123ad565b61052e565b6040516101b391906123f5565b60405180910390f35b6101c4610610565b6040516101d191906124a0565b60405180910390f35b6101f460048036038101906101ef91906124c2565b61069e565b6040516102029291906125ad565b60405180910390f35b610225600480360381019061022091906124c2565b6107e3565b60405161023291906124a0565b60405180910390f35b610255600480360381019061025091906125e4565b610877565b604051610262919061233a565b60405180910390f35b610285600480360381019061028091906124c2565b6108a9565b604051610293929190612624565b60405180910390f35b6102b660048036038101906102b191906124c2565b6108cd565b6040516102c492919061264d565b60405180910390f35b6102e760048036038101906102e2919061287a565b61094d565b005b61030360048036038101906102fe9190612a0c565b6109f5565b6040516103109190612a84565b60405180910390f35b610333600480360381019061032e9190612aa6565b610afe565b604051610341929190612c20565b60405180910390f35b610364600480360381019061035f9190612c57565b610d0a565b005b61036e610dfd565b005b610378610e11565b6040516103859190612cd5565b60405180910390f35b610396610e3b565b6040516103a3919061233a565b60405180910390f35b6103b4610e41565b6040516103c191906124a0565b60405180910390f35b6103e460048036038101906103df9190612d1c565b610ecf565b005b61040060048036038101906103fb91906125e4565b610ee5565b005b61041c60048036038101906104179190612d5c565b611066565b005b61043860048036038101906104339190612d5c565b61116d565b604051610445919061233a565b60405180910390f35b61046860048036038101906104639190612d9c565b611181565b60405161047591906123f5565b60405180910390f35b610486611215565b604051610493919061233a565b60405180910390f35b6104b660048036038101906104b19190612ddc565b61121f565b005b6104d260048036038101906104cd9190612e73565b6112c7565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f957507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061060957506106088261134d565b5b9050919050565b6004805461061d90612ecf565b80601f016020809104026020016040519081016040528092919081815260200182805461064990612ecf565b80156106965780601f1061066b57610100808354040283529160200191610696565b820191906000526020600020905b81548152906001019060200180831161067957829003601f168201915b505050505081565b60608060006006600085815260200190815260200160002090506000816002018054905067ffffffffffffffff8111156106db576106da612682565b5b6040519080825280602002602001820160405280156107095781602001602082028036833780820191505090505b50905060005b82600201805490508110156107805782600301600084600201838154811061073a57610739612f00565b5b906000526020600020015481526020019081526020016000205482828151811061076757610766612f00565b5b602002602001018181525050808060010191505061070f565b508160020181818054806020026020016040519081016040528092919081815260200182805480156107d157602002820191906000526020600020905b8154815260200190600101908083116107bd575b50505050509150935093505050915091565b6060600280546107f290612ecf565b80601f016020809104026020016040519081016040528092919081815260200182805461081e90612ecf565b801561086b5780601f106108405761010080835404028352916020019161086b565b820191906000526020600020905b81548152906001019060200180831161084e57829003601f168201915b50505050509050919050565b600060066000848152602001908152602001600020600301600083815260200190815260200160002054905092915050565b60066020528060005260406000206000915090508060000154908060010154905082565b6000606060006006600085815260200190815260200160002090508060000154816002018080548060200260200160405190810160405280929190818152602001828054801561093c57602002820191906000526020600020905b815481526020019060010190808311610928575b505050505090509250925050915091565b60006109576113b7565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415801561099c575061099a8682611181565b155b156109e05780866040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016109d7929190612f2f565b60405180910390fd5b6109ed86868686866113bf565b505050505050565b60608151835114610a4157815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610a38929190612624565b60405180910390fd5b6000835167ffffffffffffffff811115610a5e57610a5d612682565b5b604051908082528060200260200182016040528015610a8c5781602001602082028036833780820191505090505b50905060005b8451811015610af357610ac9610ab182876114b790919063ffffffff16565b610ac483876114cb90919063ffffffff16565b6104d4565b828281518110610adc57610adb612f00565b5b602002602001018181525050806001019050610a92565b508091505092915050565b6060806000835167ffffffffffffffff811115610b1e57610b1d612682565b5b604051908082528060200260200182016040528015610b4c5781602001602082028036833780820191505090505b5090506000845167ffffffffffffffff811115610b6c57610b6b612682565b5b604051908082528060200260200182016040528015610b9f57816020015b6060815260200190600190039081610b8a5790505b50905060005b8551811015610cfc576000868281518110610bc357610bc2612f00565b5b60200260200101519050600060066000838152602001908152602001600020905081858481518110610bf857610bf7612f00565b5b6020026020010181815250506000816002018054905067ffffffffffffffff811115610c2757610c26612682565b5b604051908082528060200260200182016040528015610c555781602001602082028036833780820191505090505b50905060005b8260020180549050811015610ccc57826003016000846002018381548110610c8657610c85612f00565b5b9060005260206000200154815260200190815260200160002054828281518110610cb357610cb2612f00565b5b6020026020010181815250508080600101915050610c5b565b5080858581518110610ce157610ce0612f00565b5b60200260200101819052505050508080600101915050610ba5565b508181935093505050915091565b610d126114df565b6000600660008581526020019081526020016000206000015414610d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6290612fa4565b60405180910390fd5b600060066000858152602001908152602001600020905082816000018190555081816002019080519060200190610da39291906121d9565b5060076000815480929190610db790612ff3565b91905055507f94dc7d4289d573a58ecd9059ddd224d512d70add2c89206b91775f9f4feb839f848484604051610def9392919061303b565b60405180910390a150505050565b610e056114df565b610e0f6000611566565b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b60058054610e4e90612ecf565b80601f0160208091040260200160405190810160405280929190818152602001828054610e7a90612ecf565b8015610ec75780601f10610e9c57610100808354040283529160200191610ec7565b820191906000526020600020905b815481529060010190602001808311610eaa57829003601f168201915b505050505081565b610ee1610eda6113b7565b838361162c565b5050565b60006006600084815260200190815260200160002090506000610f0833856104d4565b11610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f906130eb565b60405180910390fd5b6000805b8260020180549050811015610f985783836002018281548110610f7257610f71612f00565b5b906000526020600020015403610f8b5760019150610f98565b8080600101915050610f4c565b5080610fd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd09061317d565b60405180910390fd5b610fe53385600161179c565b816003016000848152602001908152602001600020600081548092919061100b90612ff3565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f7fe1d4e6b34e228b5dc059fcdc037c71b216fb2417f47c171e505144a5e4f5fc8585604051611058929190612624565b60405180910390a250505050565b61106e6114df565b600060066000848152602001908152602001600020905060006001905081600001548183600101546110a0919061319d565b11156110e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d890613243565b60405180910390fd5b6110fc83858360405180602001604052806000815250611843565b80826001016000828254611110919061319d565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167f2914b658708561626c3d42d97ed20d480b0eb93a2365cbce8450b5a371295ea5858360405161115f929190612624565b60405180910390a250505050565b600061117982846104d4565b905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600754905090565b60006112296113b7565b90508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415801561126e575061126c8682611181565b155b156112b25780866040517fe237d9220000000000000000000000000000000000000000000000000000000081526004016112a9929190612f2f565b60405180910390fd5b6112bf86868686866118dc565b505050505050565b6112cf6114df565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113415760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016113389190612cd5565b60405180910390fd5b61134a81611566565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114315760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016114289190612cd5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036114a35760006040517f01a8351400000000000000000000000000000000000000000000000000000000815260040161149a9190612cd5565b60405180910390fd5b6114b085858585856119e7565b5050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b6114e76113b7565b73ffffffffffffffffffffffffffffffffffffffff16611505610e11565b73ffffffffffffffffffffffffffffffffffffffff1614611564576115286113b7565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161155b9190612cd5565b60405180910390fd5b565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361169e5760006040517fced3e1000000000000000000000000000000000000000000000000000000000081526004016116959190612cd5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161178f91906123f5565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361180e5760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016118059190612cd5565b60405180910390fd5b60008061181b8484611a99565b9150915061183c8560008484604051806020016040528060008152506119e7565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036118b55760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016118ac9190612cd5565b60405180910390fd5b6000806118c28585611a99565b915091506118d46000878484876119e7565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361194e5760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016119459190612cd5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036119c05760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016119b79190612cd5565b60405180910390fd5b6000806119cd8585611a99565b915091506119de87878484876119e7565b50505050505050565b6119f385858585611ac9565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611a92576000611a316113b7565b90506001845103611a81576000611a526000866114cb90919063ffffffff16565b90506000611a6a6000866114cb90919063ffffffff16565b9050611a7a838989858589611e71565b5050611a90565b611a8f818787878787612025565b5b505b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b8051825114611b1357815181516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401611b0a929190612624565b60405180910390fd5b6000611b1d6113b7565b905060005b8351811015611d2c576000611b4082866114cb90919063ffffffff16565b90506000611b5783866114cb90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614611c8457600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c2c57888183856040517f03dee4c5000000000000000000000000000000000000000000000000000000008152600401611c239493929190613263565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611d1f578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d17919061319d565b925050819055505b5050806001019050611b22565b506001835103611deb576000611d4c6000856114cb90919063ffffffff16565b90506000611d646000856114cb90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611ddc929190612624565b60405180910390a45050611e6a565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611e619291906125ad565b60405180910390a45b5050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b111561201d578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611ed29594939291906132fd565b6020604051808303816000875af1925050508015611f0e57506040513d601f19601f82011682018060405250810190611f0b919061336c565b60015b611f92573d8060008114611f3e576040519150601f19603f3d011682016040523d82523d6000602084013e611f43565b606091505b506000815103611f8a57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611f819190612cd5565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461201b57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016120129190612cd5565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b11156121d1578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612086959493929190613399565b6020604051808303816000875af19250505080156120c257506040513d601f19601f820116820180604052508101906120bf919061336c565b60015b612146573d80600081146120f2576040519150601f19603f3d011682016040523d82523d6000602084013e6120f7565b606091505b50600081510361213e57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016121359190612cd5565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146121cf57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016121c69190612cd5565b60405180910390fd5b505b505050505050565b828054828255906000526020600020908101928215612215579160200282015b828111156122145782518255916020019190600101906121f9565b5b5090506122229190612226565b5090565b5b8082111561223f576000816000905550600101612227565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061228282612257565b9050919050565b61229281612277565b811461229d57600080fd5b50565b6000813590506122af81612289565b92915050565b6000819050919050565b6122c8816122b5565b81146122d357600080fd5b50565b6000813590506122e5816122bf565b92915050565b600080604083850312156123025761230161224d565b5b6000612310858286016122a0565b9250506020612321858286016122d6565b9150509250929050565b612334816122b5565b82525050565b600060208201905061234f600083018461232b565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61238a81612355565b811461239557600080fd5b50565b6000813590506123a781612381565b92915050565b6000602082840312156123c3576123c261224d565b5b60006123d184828501612398565b91505092915050565b60008115159050919050565b6123ef816123da565b82525050565b600060208201905061240a60008301846123e6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561244a57808201518184015260208101905061242f565b60008484015250505050565b6000601f19601f8301169050919050565b600061247282612410565b61247c818561241b565b935061248c81856020860161242c565b61249581612456565b840191505092915050565b600060208201905081810360008301526124ba8184612467565b905092915050565b6000602082840312156124d8576124d761224d565b5b60006124e6848285016122d6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612524816122b5565b82525050565b6000612536838361251b565b60208301905092915050565b6000602082019050919050565b600061255a826124ef565b61256481856124fa565b935061256f8361250b565b8060005b838110156125a0578151612587888261252a565b975061259283612542565b925050600181019050612573565b5085935050505092915050565b600060408201905081810360008301526125c7818561254f565b905081810360208301526125db818461254f565b90509392505050565b600080604083850312156125fb576125fa61224d565b5b6000612609858286016122d6565b925050602061261a858286016122d6565b9150509250929050565b6000604082019050612639600083018561232b565b612646602083018461232b565b9392505050565b6000604082019050612662600083018561232b565b8181036020830152612674818461254f565b90509392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6126ba82612456565b810181811067ffffffffffffffff821117156126d9576126d8612682565b5b80604052505050565b60006126ec612243565b90506126f882826126b1565b919050565b600067ffffffffffffffff82111561271857612717612682565b5b602082029050602081019050919050565b600080fd5b600061274161273c846126fd565b6126e2565b9050808382526020820190506020840283018581111561276457612763612729565b5b835b8181101561278d578061277988826122d6565b845260208401935050602081019050612766565b5050509392505050565b600082601f8301126127ac576127ab61267d565b5b81356127bc84826020860161272e565b91505092915050565b600080fd5b600067ffffffffffffffff8211156127e5576127e4612682565b5b6127ee82612456565b9050602081019050919050565b82818337600083830152505050565b600061281d612818846127ca565b6126e2565b905082815260208101848484011115612839576128386127c5565b5b6128448482856127fb565b509392505050565b600082601f8301126128615761286061267d565b5b813561287184826020860161280a565b91505092915050565b600080600080600060a086880312156128965761289561224d565b5b60006128a4888289016122a0565b95505060206128b5888289016122a0565b945050604086013567ffffffffffffffff8111156128d6576128d5612252565b5b6128e288828901612797565b935050606086013567ffffffffffffffff81111561290357612902612252565b5b61290f88828901612797565b925050608086013567ffffffffffffffff8111156129305761292f612252565b5b61293c8882890161284c565b9150509295509295909350565b600067ffffffffffffffff82111561296457612963612682565b5b602082029050602081019050919050565b600061298861298384612949565b6126e2565b905080838252602082019050602084028301858111156129ab576129aa612729565b5b835b818110156129d457806129c088826122a0565b8452602084019350506020810190506129ad565b5050509392505050565b600082601f8301126129f3576129f261267d565b5b8135612a03848260208601612975565b91505092915050565b60008060408385031215612a2357612a2261224d565b5b600083013567ffffffffffffffff811115612a4157612a40612252565b5b612a4d858286016129de565b925050602083013567ffffffffffffffff811115612a6e57612a6d612252565b5b612a7a85828601612797565b9150509250929050565b60006020820190508181036000830152612a9e818461254f565b905092915050565b600060208284031215612abc57612abb61224d565b5b600082013567ffffffffffffffff811115612ada57612ad9612252565b5b612ae684828501612797565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000612b37826124ef565b612b418185612b1b565b9350612b4c8361250b565b8060005b83811015612b7d578151612b64888261252a565b9750612b6f83612542565b925050600181019050612b50565b5085935050505092915050565b6000612b968383612b2c565b905092915050565b6000602082019050919050565b6000612bb682612aef565b612bc08185612afa565b935083602082028501612bd285612b0b565b8060005b85811015612c0e5784840389528151612bef8582612b8a565b9450612bfa83612b9e565b925060208a01995050600181019050612bd6565b50829750879550505050505092915050565b60006040820190508181036000830152612c3a818561254f565b90508181036020830152612c4e8184612bab565b90509392505050565b600080600060608486031215612c7057612c6f61224d565b5b6000612c7e868287016122d6565b9350506020612c8f868287016122d6565b925050604084013567ffffffffffffffff811115612cb057612caf612252565b5b612cbc86828701612797565b9150509250925092565b612ccf81612277565b82525050565b6000602082019050612cea6000830184612cc6565b92915050565b612cf9816123da565b8114612d0457600080fd5b50565b600081359050612d1681612cf0565b92915050565b60008060408385031215612d3357612d3261224d565b5b6000612d41858286016122a0565b9250506020612d5285828601612d07565b9150509250929050565b60008060408385031215612d7357612d7261224d565b5b6000612d81858286016122d6565b9250506020612d92858286016122a0565b9150509250929050565b60008060408385031215612db357612db261224d565b5b6000612dc1858286016122a0565b9250506020612dd2858286016122a0565b9150509250929050565b600080600080600060a08688031215612df857612df761224d565b5b6000612e06888289016122a0565b9550506020612e17888289016122a0565b9450506040612e28888289016122d6565b9350506060612e39888289016122d6565b925050608086013567ffffffffffffffff811115612e5a57612e59612252565b5b612e668882890161284c565b9150509295509295909350565b600060208284031215612e8957612e8861224d565b5b6000612e97848285016122a0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ee757607f821691505b602082108103612efa57612ef9612ea0565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050612f446000830185612cc6565b612f516020830184612cc6565b9392505050565b7f526f6f6d2077697468207468697320494420616c726561647920657869737473600082015250565b6000612f8e60208361241b565b9150612f9982612f58565b602082019050919050565b60006020820190508181036000830152612fbd81612f81565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ffe826122b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036130305761302f612fc4565b5b600182019050919050565b6000606082019050613050600083018661232b565b61305d602083018561232b565b818103604083015261306f818461254f565b9050949350505050565b7f596f7520646f206e6f7420686176652074686520726571756972656420746f6b60008201527f656e20666f72207468697320726f6f6d00000000000000000000000000000000602082015250565b60006130d560308361241b565b91506130e082613079565b604082019050919050565b60006020820190508181036000830152613104816130c8565b9050919050565b7f496e76616c69642063616e64696461746520494420666f72207468697320726f60008201527f6f6d000000000000000000000000000000000000000000000000000000000000602082015250565b600061316760228361241b565b91506131728261310b565b604082019050919050565b600060208201905081810360008301526131968161315a565b9050919050565b60006131a8826122b5565b91506131b3836122b5565b92508282019050808211156131cb576131ca612fc4565b5b92915050565b7f546f6b656e206c696d697420657863656564656420666f72207468697320726f60008201527f6f6d000000000000000000000000000000000000000000000000000000000000602082015250565b600061322d60228361241b565b9150613238826131d1565b604082019050919050565b6000602082019050818103600083015261325c81613220565b9050919050565b60006080820190506132786000830187612cc6565b613285602083018661232b565b613292604083018561232b565b61329f606083018461232b565b95945050505050565b600081519050919050565b600082825260208201905092915050565b60006132cf826132a8565b6132d981856132b3565b93506132e981856020860161242c565b6132f281612456565b840191505092915050565b600060a0820190506133126000830188612cc6565b61331f6020830187612cc6565b61332c604083018661232b565b613339606083018561232b565b818103608083015261334b81846132c4565b90509695505050505050565b60008151905061336681612381565b92915050565b6000602082840312156133825761338161224d565b5b600061339084828501613357565b91505092915050565b600060a0820190506133ae6000830188612cc6565b6133bb6020830187612cc6565b81810360408301526133cd818661254f565b905081810360608301526133e1818561254f565b905081810360808301526133f581846132c4565b9050969550505050505056fea26469706673582212203662073939ead2d0b8a9eb1a7db9e467fdb409fb5986edf8aae789cc1da3099664736f6c634300081b0033\"";

    private static String librariesLinkedBinary;

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_CREATEROOM = "createRoom";

    public static final String FUNC_DISTRIBUTETOKENS = "distributeTokens";

    public static final String FUNC_GETCANDIDATEVOTES = "getCandidateVotes";

    public static final String FUNC_GETCLOSEDROOMSDETAILS = "getClosedRoomsDetails";

    public static final String FUNC_GETROOMCOUNT = "getRoomCount";

    public static final String FUNC_GETROOMDETAILS = "getRoomDetails";

    public static final String FUNC_GETROOMRESULTS = "getRoomResults";

    public static final String FUNC_GETUSERTOKENBALANCEINROOM = "getUserTokenBalanceInRoom";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROOMCOUNTER = "roomCounter";

    public static final String FUNC_ROOMS = "rooms";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_URI = "uri";

    public static final String FUNC_VOTE = "vote";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROOMCREATED_EVENT = new Event("RoomCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TOKENDISTRIBUTED_EVENT = new Event("TokenDistributed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event VOTECAST_EVENT = new Event("VoteCast", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected VotingRooms(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected VotingRooms(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected VotingRooms(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected VotingRooms(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<RoomCreatedEventResponse> getRoomCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ROOMCREATED_EVENT, transactionReceipt);
        ArrayList<RoomCreatedEventResponse> responses = new ArrayList<RoomCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoomCreatedEventResponse typedResponse = new RoomCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.candidateIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RoomCreatedEventResponse getRoomCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ROOMCREATED_EVENT, log);
        RoomCreatedEventResponse typedResponse = new RoomCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tokenLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.candidateIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(2)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<RoomCreatedEventResponse> roomCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRoomCreatedEventFromLog(log));
    }

    public Flowable<RoomCreatedEventResponse> roomCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROOMCREATED_EVENT));
        return roomCreatedEventFlowable(filter);
    }

    public static List<TokenDistributedEventResponse> getTokenDistributedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TOKENDISTRIBUTED_EVENT, transactionReceipt);
        ArrayList<TokenDistributedEventResponse> responses = new ArrayList<TokenDistributedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenDistributedEventResponse typedResponse = new TokenDistributedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TokenDistributedEventResponse getTokenDistributedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TOKENDISTRIBUTED_EVENT, log);
        TokenDistributedEventResponse typedResponse = new TokenDistributedEventResponse();
        typedResponse.log = log;
        typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TokenDistributedEventResponse> tokenDistributedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTokenDistributedEventFromLog(log));
    }

    public Flowable<TokenDistributedEventResponse> tokenDistributedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENDISTRIBUTED_EVENT));
        return tokenDistributedEventFlowable(filter);
    }

    public static List<TransferBatchEventResponse> getTransferBatchEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferBatchEventResponse getTransferBatchEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
        TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
        typedResponse.log = log;
        typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.ids = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.values = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferBatchEventFromLog(log));
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public static List<TransferSingleEventResponse> getTransferSingleEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferSingleEventResponse getTransferSingleEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
        TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
        typedResponse.log = log;
        typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferSingleEventFromLog(log));
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public static List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static URIEventResponse getURIEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(URI_EVENT, log);
        URIEventResponse typedResponse = new URIEventResponse();
        typedResponse.log = log;
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getURIEventFromLog(log));
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public static List<VoteCastEventResponse> getVoteCastEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VOTECAST_EVENT, transactionReceipt);
        ArrayList<VoteCastEventResponse> responses = new ArrayList<VoteCastEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteCastEventResponse typedResponse = new VoteCastEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.candidateId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VoteCastEventResponse getVoteCastEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VOTECAST_EVENT, log);
        VoteCastEventResponse typedResponse = new VoteCastEventResponse();
        typedResponse.log = log;
        typedResponse.voter = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.roomId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.candidateId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVoteCastEventFromLog(log));
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECAST_EVENT));
        return voteCastEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final Function function = new Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> createRoom(BigInteger roomId,
            BigInteger tokenLimit, List<BigInteger> candidateIds) {
        final Function function = new Function(
                FUNC_CREATEROOM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenLimit), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(candidateIds, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> distributeTokens(BigInteger roomId, String to) {
        final Function function = new Function(
                FUNC_DISTRIBUTETOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getCandidateVotes(BigInteger roomId,
            BigInteger candidateId) {
        final Function function = new Function(FUNC_GETCANDIDATEVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.generated.Uint256(candidateId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<List<BigInteger>>>> getClosedRoomsDetails(
            List<BigInteger> roomIds) {
        final Function function = new Function(FUNC_GETCLOSEDROOMSDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(roomIds, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<DynamicArray<Uint256>>>() {}));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<List<BigInteger>>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<List<BigInteger>>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<List<BigInteger>>> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<List<BigInteger>>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<DynamicArray<Uint256>>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getRoomCount() {
        final Function function = new Function(FUNC_GETROOMCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, List<BigInteger>>> getRoomDetails(
            BigInteger roomId) {
        final Function function = new Function(FUNC_GETROOMDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, List<BigInteger>>>(function,
                new Callable<Tuple2<BigInteger, List<BigInteger>>>() {
                    @Override
                    public Tuple2<BigInteger, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, List<BigInteger>>(
                                (BigInteger) results.get(0).getValue(), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>> getRoomResults(
            BigInteger roomId) {
        final Function function = new Function(FUNC_GETROOMRESULTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getUserTokenBalanceInRoom(BigInteger roomId,
            String user) {
        final Function function = new Function(FUNC_GETUSERTOKENBALANCEINROOM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> roomCounter() {
        final Function function = new Function(FUNC_ROOMCOUNTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> rooms(BigInteger param0) {
        final Function function = new Function(FUNC_ROOMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to,
            List<BigInteger> ids, List<BigInteger> values, byte[] data) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger id, BigInteger value, byte[] data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final Function function = new Function(FUNC_URI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger roomId, BigInteger candidateId) {
        final Function function = new Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(roomId), 
                new org.web3j.abi.datatypes.generated.Uint256(candidateId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static VotingRooms load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingRooms(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static VotingRooms load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new VotingRooms(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static VotingRooms load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new VotingRooms(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static VotingRooms load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new VotingRooms(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<VotingRooms> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingRooms.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<VotingRooms> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(VotingRooms.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VotingRooms> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingRooms.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<VotingRooms> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(VotingRooms.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RoomCreatedEventResponse extends BaseEventResponse {
        public BigInteger roomId;

        public BigInteger tokenLimit;

        public List<BigInteger> candidateIds;
    }

    public static class TokenDistributedEventResponse extends BaseEventResponse {
        public String user;

        public BigInteger roomId;

        public BigInteger amount;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public String voter;

        public BigInteger roomId;

        public BigInteger candidateId;
    }
}
